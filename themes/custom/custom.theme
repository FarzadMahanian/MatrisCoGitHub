<?php

/**
 * Implements hook_preprocess_html_HOOK() for html.html.twig.
 */
function custom_preprocess_html(array &$variables) {
    if ($variables['html_attributes']['dir'] == 'rtl') {
        $variables['#attached']['library'][] = 'custom/custom-theme-rtl';
    } else {
        $variables['#attached']['library'][] = 'custom/custom-theme';
    }

    $variables['langCode'] = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $variables['#attached']['drupalSettings']['path']['themeUrl'] = \Drupal::theme()->getActiveTheme()->getPath();
}






/**
 * Implements hook_preprocess_breadcrumb().
 */

//function custom_preprocess_breadcrumb(&$variables){
//  if(($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']){
//    $variables['breadcrumb'][] = array(
//     'text' => $node->getTitle(),
//     'url' => $node->URL()
//   );
//  }
//}


/**
 * Implements hook_theme_suggestions_node_alter().
 */
function custom_theme_suggestions_node_alter(array &$suggestions, array $variables) {

    $node = $variables['elements']['#node'];
    $enNode = \Drupal\node\Entity\Node::load($node->id());

//    var_dump('node__title_' . strtolower(str_replace(' ', '_', $enNode->getTitle())));die;

    if ($variables['elements']['#view_mode'] == "full") {
        $suggestions[] = 'node__title_' . strtolower(str_replace(' ', '_', $enNode->getTitle()));

    }


    $suggestions[] = 'node__' . strtolower(str_replace(' ', '_', $node->getType()))
        . '_' . \Drupal::languageManager()->getCurrentLanguage()->getId() . '__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */

function custom_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
    $block = $variables['elements'];
    $blockType = $block['#configuration']['provider'];
    if ($blockType == "block_content") {
        $bundle = $block['content']['#block_content']->bundle();
        $suggestions[] = 'block__' . $blockType . '__' . $bundle;
    }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */

function custom_theme_suggestions_views_view_alter(array &$suggestions, array $variables)
{
    $view = $variables['view'];
    $suggestions[] = 'views_view__' . strtolower(str_replace(' ', '_', $view->storage->id())) . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_theme_suggestions_views_view_unformatted_alter().
 */

function custom_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables)
{
//    var_dump($variables);die;
    $view = $variables['view'];
    $suggestions[] = 'views_view_unformatted__' . strtolower(str_replace(' ', '_', $view->storage->id())) . '__' . $variables['view']->current_display;
}

/**
 * Implements hook_preprocess_HOOK() for views templates.
 */
//function custom_preprocess_views_view(&$variables) {
//    $view = $variables['view'];
//    $variables['title'] = [
//        '#markup' => $view->getTitle(),
//    ];
//}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */

function custom_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables)
{
//    var_dump($variables['elements']['#taxonomy_term']->bundle());die;
    $taxonomy = $variables['elements']['#taxonomy_term']->view;
    if ($taxonomy) {
        $suggestions[] = 'taxonomy_term__' . strtolower(str_replace(' ', '_', $taxonomy->id())) . '__' . $taxonomy->current_display;
    }
    $suggestions[] = 'taxonomy_term__view_mode__' . strtolower(str_replace(' ', '_', $variables['elements']['#view_mode']))  . '__' . $variables['elements']['#taxonomy_term']->bundle();
}

/**
 * Implements hook_theme_suggestions_HOOK() for contact form suggestion.
 */
function custom_theme_suggestions_form_alter(array &$suggestions, array $variables) {
    $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function custom_preprocess(&$variables, $hook) {
    $language_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $host_path = \Drupal::request()->getScheme() . '://' . \Drupal::request()->getHost();
    $base_path = $host_path;
    $base_path .= DIRECTORY_SEPARATOR;
    $variables['language_id'] = $language_id;
    $variables['host_path'] = $host_path;
    $variables['base_path'] = $base_path;
}


